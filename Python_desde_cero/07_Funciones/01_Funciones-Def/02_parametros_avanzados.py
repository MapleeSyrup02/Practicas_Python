

"""
üìò FUNCIONES AVANZADAS EN PYTHON: Uso de `/` y `*` en Par√°metros

Python permite controlar c√≥mo se pasan los argumentos a una funci√≥n usando `/` y `*`.
Esto es muy √∫til para mejorar la legibilidad y evitar errores comunes.
"""

# ============================
# ‚ñ∂Ô∏è 1. Uso de `/` en funciones
# ============================

# El `/` indica que los par√°metros antes de √©l **deben** pasarse por posici√≥n (NO por nombre).
def devolver_cuadrado(x, /):
    return x ** 2

# ‚úÖ Correcto: por posici√≥n
print(devolver_cuadrado(3))  # Resultado: 9

# ‚ùå Incorrecto: no se puede usar keyword
# print(devolver_cuadrado(x=3))  # Error: x is positional-only


# ====================================
# ‚ñ∂Ô∏è 2. Uso de `*` en funciones
# ====================================

# El `*` indica que los par√°metros despu√©s de √©l **deben** pasarse por nombre (keyword).
def saludar(*, nombre, mensaje):
    return f"{mensaje}, {nombre}!"

# ‚úÖ Correcto: por nombre
print(saludar(nombre="Ana", mensaje="Hola"))  # Resultado: Hola, Ana!

# ‚ùå Incorrecto: no se puede por posici√≥n
# print(saludar("Ana", "Hola"))  # Error


# =============================================
# ‚ñ∂Ô∏è 3. Combinaci√≥n de `/`, par√°metros normales y `*`
# =============================================

def ejemplo(a, b, /, c, *, d, e):
    print(f"a: {a}, b: {b}, c: {c}, d: {d}, e: {e}")

# ‚úÖ Llamada v√°lida:
ejemplo(1, 2, 3, d=4, e=5)

# Explicaci√≥n:
# - a y b deben ir por posici√≥n (por el `/`)
# - c puede ir por posici√≥n o nombre
# - d y e deben ir por nombre (por el `*`)


# =============================================
# ‚ñ∂Ô∏è 4. Resumen visual:
# =============================================

# def funcion(pos1, pos2, /, normal, *, key1, key2):
#     pass

# - pos1 y pos2 ‚Üí deben pasarse por posici√≥n
# - normal      ‚Üí se puede pasar por posici√≥n o nombre
# - key1, key2  ‚Üí deben pasarse por nombre (keyword)


# =============================================
# ‚ñ∂Ô∏è 5. ¬øPor qu√© usar `/` y `*`?
# =============================================

# ‚úÖ Ventajas:
# - M√°s claridad al usar funciones complejas.
# - Permite evitar errores al pasar argumentos.
# - √ötil cuando quer√©s que ciertos par√°metros se pasen siempre por nombre (por ejemplo, configuraciones).

# ‚úÖ Buenas pr√°cticas:
# - Us√° `/` cuando quieras evitar que alguien use el nombre del par√°metro por error.
# - Us√° `*` para forzar que se usen nombres claros en par√°metros importantes.
